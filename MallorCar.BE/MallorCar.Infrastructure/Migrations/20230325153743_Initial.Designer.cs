// <auto-generated />
using System;
using MallorCar.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MallorCar.Infrastructure.Migrations
{
    [DbContext(typeof(MallorCarDbContext))]
    [Migration("20230325153743_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MallorCar.Domain.Entities.Car", b =>
                {
                    b.Property<Guid>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.HasKey("CarId");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Model", b =>
                {
                    b.Property<Guid>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("ModelAcceleration")
                        .HasColumnType("double precision");

                    b.Property<decimal>("ModelBaseDailyPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModelNumOfSeats")
                        .HasColumnType("integer");

                    b.Property<string>("ModelPhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModelRange")
                        .HasColumnType("integer");

                    b.Property<string>("ModelSubName")
                        .HasColumnType("text");

                    b.Property<double>("ModelTopSpeed")
                        .HasColumnType("double precision");

                    b.HasKey("ModelId");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RentalEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RentalEndLocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RentalStartLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("RentalId");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.HasIndex("RentalEndLocationId");

                    b.HasIndex("RentalStartLocationId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Car", b =>
                {
                    b.HasOne("MallorCar.Domain.Entities.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Rental", b =>
                {
                    b.HasOne("MallorCar.Domain.Entities.Car", "Car")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MallorCar.Domain.Entities.Client", "Client")
                        .WithMany("Rentals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MallorCar.Domain.Entities.Location", "RentalEndLocation")
                        .WithMany("EndsOfRentals")
                        .HasForeignKey("RentalEndLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MallorCar.Domain.Entities.Location", "RentalStartLocation")
                        .WithMany("BeginningsOfRentals")
                        .HasForeignKey("RentalStartLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("RentalEndLocation");

                    b.Navigation("RentalStartLocation");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Car", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Client", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Location", b =>
                {
                    b.Navigation("BeginningsOfRentals");

                    b.Navigation("EndsOfRentals");
                });

            modelBuilder.Entity("MallorCar.Domain.Entities.Model", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
